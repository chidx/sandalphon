->          /                                                                       sandalphoncommons.Routes
->          /                                                                       jophielcommons.Routes

GET         /                                                                       @org.iatoki.judgels.sandalphon.controllers.ApplicationController.index()
GET         /auth                                                                   @org.iatoki.judgels.sandalphon.controllers.ApplicationController.auth(returnUri ?= "")
GET         /authRole                                                               @org.iatoki.judgels.sandalphon.controllers.ApplicationController.authRole(returnUri ?= "")
GET         /afterLogin                                                             @org.iatoki.judgels.sandalphon.controllers.ApplicationController.afterLogin(returnUri ?= "")
POST        /viewAs                                                                 @org.iatoki.judgels.sandalphon.controllers.ApplicationController.postViewAs()
GET         /resetViewAs                                                            @org.iatoki.judgels.sandalphon.controllers.ApplicationController.resetViewAs()
GET         /localLogout                                                            @org.iatoki.judgels.sandalphon.controllers.ApplicationController.logout(returnUri ?= "")

GET         /problems                                                               @org.iatoki.judgels.sandalphon.controllers.ProblemController.index()
GET         /problems/                                                              @org.iatoki.judgels.sandalphon.controllers.ProblemController.listProblems(pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "asc", filterString ?= "")
GET         /problems/new                                                           @org.iatoki.judgels.sandalphon.controllers.ProblemController.createProblem()
POST        /problems                                                               @org.iatoki.judgels.sandalphon.controllers.ProblemController.postCreateProblem()
GET         /problems/programming/new                                               @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemController.createProgrammingProblem()
POST        /problems/programming                                                   @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemController.postCreateProgrammingProblem()
GET         /problems/bundle/new                                                    @org.iatoki.judgels.sandalphon.controllers.BundleProblemController.createBundleProblem()

GET         /problems/:problemId                                                    @org.iatoki.judgels.sandalphon.controllers.ProblemController.viewProblem(problemId: Long)
GET         /problems/:problemId/edit                                               @org.iatoki.judgels.sandalphon.controllers.ProblemController.editProblem(problemId: Long)
POST        /problems/:problemId                                                    @org.iatoki.judgels.sandalphon.controllers.ProblemController.postEditProblem(problemId: Long)

GET         /problems/:problemId/enter                                              @org.iatoki.judgels.sandalphon.controllers.ProblemController.enterProblem(problemId: Long)

GET         /problems/:problemId/jumpToStatements                                   @org.iatoki.judgels.sandalphon.controllers.ProblemController.jumpToStatement(problemId: Long)
GET         /problems/:problemId/jumpToVersions                                     @org.iatoki.judgels.sandalphon.controllers.ProblemController.jumpToVersions(problemId: Long)
GET         /problems/:problemId/jumpToPartners                                     @org.iatoki.judgels.sandalphon.controllers.ProblemController.jumpToPartners(problemId: Long)
GET         /problems/:problemId/jumpToClients                                      @org.iatoki.judgels.sandalphon.controllers.ProblemController.jumpToClients(problemId: Long)

POST        /problems/:problemId/switchLanguage                                     @org.iatoki.judgels.sandalphon.controllers.ProblemController.switchLanguage(problemId: Long)

GET         /problems/:problemId/statements                                         @org.iatoki.judgels.sandalphon.controllers.ProblemStatementController.viewStatement(problemId: Long)
GET         /problems/:problemId/statements/edit                                    @org.iatoki.judgels.sandalphon.controllers.ProblemStatementController.editStatement(problemId: Long)
POST        /problems/:problemId/statements                                         @org.iatoki.judgels.sandalphon.controllers.ProblemStatementController.postEditStatement(problemId: Long)
GET         /problems/:problemId/statements/media                                   @org.iatoki.judgels.sandalphon.controllers.ProblemStatementController.listStatementMediaFiles(problemId: Long)
POST        /problems/:problemId/statements/media                                   @org.iatoki.judgels.sandalphon.controllers.ProblemStatementController.postUploadStatementMediaFiles(problemId: Long)
GET         /problems/:problemId/statements/languages                               @org.iatoki.judgels.sandalphon.controllers.ProblemStatementController.listStatementLanguages(problemId: Long)
POST        /problems/:problemId/statements/languages                               @org.iatoki.judgels.sandalphon.controllers.ProblemStatementController.postAddStatementLanguage(problemId: Long)
GET         /problems/:problemId/statements/languages/:language/enable              @org.iatoki.judgels.sandalphon.controllers.ProblemStatementController.enableStatementLanguage(problemId: Long, language)
GET         /problems/:problemId/statements/languages/:language/disable             @org.iatoki.judgels.sandalphon.controllers.ProblemStatementController.disableStatementLanguage(problemId: Long, language)
GET         /problems/:problemId/statements/languages/:language/makeDefault         @org.iatoki.judgels.sandalphon.controllers.ProblemStatementController.makeDefaultStatementLanguage(problemId: Long, language)

GET         /problems/:problemId/partners                                           @org.iatoki.judgels.sandalphon.controllers.ProblemPartnerController.viewPartners(problemId: Long)
GET         /problems/:problemId/partners/                                          @org.iatoki.judgels.sandalphon.controllers.ProblemPartnerController.listPartners(problemId: Long, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc")
GET         /problems/:problemId/partners/add                                       @org.iatoki.judgels.sandalphon.controllers.ProblemPartnerController.addPartner(problemId: Long)
GET         /problems/:problemId/partners/:partnerId/edit                           @org.iatoki.judgels.sandalphon.controllers.ProblemPartnerController.editPartner(problemId: Long, partnerId: Long)

GET         /problems/:problemId/versions/history                                   @org.iatoki.judgels.sandalphon.controllers.ProblemVersionController.listVersionHistory(problemId: Long)
GET         /problems/:problemId/versions/history/:hash/restore                     @org.iatoki.judgels.sandalphon.controllers.ProblemVersionController.restoreVersionHistory(problemId: Long, hash)
GET         /problems/:problemId/versions/local                                     @org.iatoki.judgels.sandalphon.controllers.ProblemVersionController.viewVersionLocalChanges(problemId: Long)
POST        /problems/:problemId/versions/local                                     @org.iatoki.judgels.sandalphon.controllers.ProblemVersionController.postCommitVersionLocalChanges(problemId: Long)
GET         /problems/:problemId/versions/local/rebase                              @org.iatoki.judgels.sandalphon.controllers.ProblemVersionController.editVersionLocalChanges(problemId: Long)
GET         /problems/:problemId/versions/local/discard                             @org.iatoki.judgels.sandalphon.controllers.ProblemVersionController.discardVersionLocalChanges(problemId: Long)

GET         /problems/:problemId/clients                                            @org.iatoki.judgels.sandalphon.controllers.ProblemClientController.editClientProblems(problemId: Long)
POST        /problems/:problemId/clients                                            @org.iatoki.judgels.sandalphon.controllers.ProblemClientController.postEditClientProblems(problemId: Long)
GET         /problems/:problemId/clients/:clientId                                  @org.iatoki.judgels.sandalphon.controllers.ProblemClientController.viewClientProblem(problemId: Long, clientId: Long)


GET         /problems/programming/:problemId/jumpToGrading                          @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemController.jumpToGrading(problemId: Long)
GET         /problems/programming/:problemId/jumpToSubmissions                      @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemController.jumpToSubmissions(problemId: Long)

GET         /problems/programming/:problemId/statements                             @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemStatementController.viewStatement(problemId: Long)

GET         /problems/programming/:problemId/partners/add                           @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemPartnerController.addPartner(problemId: Long)
POST        /problems/programming/:problemId/partners                               @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemPartnerController.postAddPartner(problemId: Long)
GET         /problems/programming/:problemId/partners/:partnerId/edit               @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemPartnerController.editPartner(problemId: Long, partnerId: Long)
POST        /problems/programming/:problemId/partners/:partnerId                    @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemPartnerController.postEditPartner(problemId: Long, partnerId: Long)


POST        /problems/programming/:problemId/submissions                            @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemSubmissionController.postSubmit(problemId: Long)
GET         /problems/programming/:problemId/submissions                            @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemSubmissionController.viewSubmissions(problemId: Long)
GET         /problems/programming/:problemId/submissions/                           @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemSubmissionController.listSubmissions(problemId: Long, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc")
GET         /problems/programming/:problemId/submissions/:submissionId              @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemSubmissionController.viewSubmission(problemId: Long, submissionId: Long)
GET         /problems/programming/:problemId/submissions/:submissionId/regrade      @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemSubmissionController.regradeSubmission(problemId: Long, submissionId: Long, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc")
POST        /problems/programming/:problemId/submissions/regrade                    @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemSubmissionController.regradeSubmissions(problemId: Long, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc")

GET         /problems/programming/:problemId/grading/engine                         @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.editGradingEngine(problemId: Long)
POST        /problems/programming/:problemId/grading/engine                         @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.postEditGradingEngine(problemId: Long)
GET         /problems/programming/:problemId/grading/config                         @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.editGradingConfig(problemId: Long)
POST        /problems/programming/:problemId/grading/config                         @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.postEditGradingConfig(problemId: Long)
GET         /problems/programming/:problemId/grading/config/tokilib                 @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.editGradingConfigByTokilibFormat(problemId: Long)
GET         /problems/programming/:problemId/grading/config/autoPopulation          @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.editGradingConfigByAutoPopulation(problemId: Long)
GET         /problems/programming/:problemId/grading/testdata                       @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.listGradingTestDataFiles(problemId: Long)
POST        /problems/programming/:problemId/grading/testdata                       @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.postUploadGradingTestDataFiles(problemId: Long)
GET         /problems/programming/:problemId/grading/helpers                        @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.listGradingHelperFiles(problemId: Long)
POST        /problems/programming/:problemId/grading/helpers                        @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.postUploadGradingHelperFiles(problemId: Long)
GET         /problems/programming/:problemId/grading/languageRestriction            @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.editLanguageRestriction(problemId: Long)
POST        /problems/programming/:problemId/grading/languageRestriction            @org.iatoki.judgels.sandalphon.controllers.ProgrammingProblemGradingController.postEditLanguageRestriction(problemId: Long)

GET         /problems/bundle/:problemId/jumpToItems                                 @org.iatoki.judgels.sandalphon.controllers.BundleProblemController.jumpToItems(problemId: Long)
GET         /problems/bundle/:problemId/jumpToSubmissions                           @org.iatoki.judgels.sandalphon.controllers.BundleProblemController.jumpToSubmissions(problemId: Long)

GET         /problems/bundle/:problemId/items                                       @org.iatoki.judgels.sandalphon.controllers.BundleItemController.viewItems(problemId: Long)
GET         /problems/bundle/:problemId/items/                                      @org.iatoki.judgels.sandalphon.controllers.BundleItemController.listCreateItems(problemId: Long, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc", filterString ?= "")
GET         /problems/bundle/:problemId/items/new                                   @org.iatoki.judgels.sandalphon.controllers.BundleItemController.createItem(problemId: Long, itemType, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc", filterString ?= "")
POST        /problems/bundle/:problemId/items                                       @org.iatoki.judgels.sandalphon.controllers.BundleItemController.postCreateItem(problemId: Long, itemType, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc", filterString ?= "")
GET         /problems/bundle/:problemId/items/:itemJid                              @org.iatoki.judgels.sandalphon.controllers.BundleItemController.editItem(problemId: Long, itemJid)
POST        /problems/bundle/:problemId/items/:itemJid                              @org.iatoki.judgels.sandalphon.controllers.BundleItemController.postEditItem(problemId: Long, itemJid)
GET         /problems/bundle/:problemId/items/:itemJid/up                           @org.iatoki.judgels.sandalphon.controllers.BundleItemController.moveItemUp(problemId: Long, itemJid)
GET         /problems/bundle/:problemId/items/:itemJid/down                         @org.iatoki.judgels.sandalphon.controllers.BundleItemController.moveItemDown(problemId: Long, itemJid)
GET         /problems/bundle/:problemId/items/:itemJid/remove                       @org.iatoki.judgels.sandalphon.controllers.BundleItemController.removeItem(problemId: Long, itemJid)

GET         /problems/bundle/:problemId/statements                                  @org.iatoki.judgels.sandalphon.controllers.BundleProblemStatementController.viewStatement(problemId: Long)

GET         /problems/bundle/:problemId/partners/add                                @org.iatoki.judgels.sandalphon.controllers.BundleProblemPartnerController.addPartner(problemId: Long)
POST        /problems/bundle/:problemId/partners                                    @org.iatoki.judgels.sandalphon.controllers.BundleProblemPartnerController.postAddPartner(problemId: Long)
GET         /problems/bundle/:problemId/partners/:partnerId/edit                    @org.iatoki.judgels.sandalphon.controllers.BundleProblemPartnerController.editPartner(problemId: Long, partnerId: Long)
POST        /problems/bundle/:problemId/partners/:partnerId                         @org.iatoki.judgels.sandalphon.controllers.BundleProblemPartnerController.postEditPartner(problemId: Long, partnerId: Long)

POST        /problems/bundle/:problemId/submissions                                 @org.iatoki.judgels.sandalphon.controllers.BundleProblemSubmissionController.postSubmit(problemId: Long)
GET         /problems/bundle/:problemId/submissions                                 @org.iatoki.judgels.sandalphon.controllers.BundleProblemSubmissionController.viewSubmissions(problemId: Long)
GET         /problems/bundle/:problemId/submissions/                                @org.iatoki.judgels.sandalphon.controllers.BundleProblemSubmissionController.listSubmissions(problemId: Long, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc")
GET         /problems/bundle/:problemId/submissions/:submissionId                   @org.iatoki.judgels.sandalphon.controllers.BundleProblemSubmissionController.viewSubmission(problemId: Long, submissionId: Long)
GET         /problems/bundle/:problemId/submissions/:submissionId/regrade           @org.iatoki.judgels.sandalphon.controllers.BundleProblemSubmissionController.regradeSubmission(problemId: Long, submissionId: Long, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc")
POST        /problems/bundle/:problemId/submissions/regrade                         @org.iatoki.judgels.sandalphon.controllers.BundleProblemSubmissionController.regradeSubmissions(problemId: Long, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc")

GET         /lessons                                                                @org.iatoki.judgels.sandalphon.controllers.LessonController.index()
GET         /lessons/                                                               @org.iatoki.judgels.sandalphon.controllers.LessonController.listLessons(pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "asc", filterString ?= "")
GET         /lessons/new                                                            @org.iatoki.judgels.sandalphon.controllers.LessonController.createLesson()
POST        /lessons                                                                @org.iatoki.judgels.sandalphon.controllers.LessonController.postCreateLesson()

GET         /lessons/:lessonId                                                      @org.iatoki.judgels.sandalphon.controllers.LessonController.viewLesson(lessonId: Long)
GET         /lessons/:lessonId/edit                                                 @org.iatoki.judgels.sandalphon.controllers.LessonController.editLesson(lessonId: Long)
POST        /lessons/:lessonId                                                      @org.iatoki.judgels.sandalphon.controllers.LessonController.postEditLesson(lessonId: Long)

GET         /lessons/:lessonId/enter                                                @org.iatoki.judgels.sandalphon.controllers.LessonController.enterLesson(lessonId: Long)

GET         /lessons/:lessonId/jumpToStatements                                     @org.iatoki.judgels.sandalphon.controllers.LessonController.jumpToStatement(lessonId: Long)
GET         /lessons/:lessonId/jumpToVersions                                       @org.iatoki.judgels.sandalphon.controllers.LessonController.jumpToVersions(lessonId: Long)
GET         /lessons/:lessonId/jumpToPartners                                       @org.iatoki.judgels.sandalphon.controllers.LessonController.jumpToPartners(lessonId: Long)
GET         /lessons/:lessonId/jumpToClients                                        @org.iatoki.judgels.sandalphon.controllers.LessonController.jumpToClients(lessonId: Long)

POST        /lessons/:lessonId/switchLanguage                                       @org.iatoki.judgels.sandalphon.controllers.LessonController.switchLanguage(lessonId: Long)

GET         /lessons/:lessonId/statements                                           @org.iatoki.judgels.sandalphon.controllers.LessonStatementController.viewStatement(lessonId: Long)
GET         /lessons/:lessonId/statements/edit                                      @org.iatoki.judgels.sandalphon.controllers.LessonStatementController.editStatement(lessonId: Long)
POST        /lessons/:lessonId/statements                                           @org.iatoki.judgels.sandalphon.controllers.LessonStatementController.postEditStatement(lessonId: Long)
GET         /lessons/:lessonId/statements/media                                     @org.iatoki.judgels.sandalphon.controllers.LessonStatementController.listStatementMediaFiles(lessonId: Long)
POST        /lessons/:lessonId/statements/media                                     @org.iatoki.judgels.sandalphon.controllers.LessonStatementController.postUploadStatementMediaFiles(lessonId: Long)
GET         /lessons/:lessonId/statements/languages                                 @org.iatoki.judgels.sandalphon.controllers.LessonStatementController.listStatementLanguages(lessonId: Long)
POST        /lessons/:lessonId/statements/languages                                 @org.iatoki.judgels.sandalphon.controllers.LessonStatementController.postAddStatementLanguage(lessonId: Long)
GET         /lessons/:lessonId/statements/languages/:language/enable                @org.iatoki.judgels.sandalphon.controllers.LessonStatementController.enableStatementLanguage(lessonId: Long, language)
GET         /lessons/:lessonId/statements/languages/:language/disable               @org.iatoki.judgels.sandalphon.controllers.LessonStatementController.disableStatementLanguage(lessonId: Long, language)
GET         /lessons/:lessonId/statements/languages/:language/makeDefault           @org.iatoki.judgels.sandalphon.controllers.LessonStatementController.makeDefaultStatementLanguage(lessonId: Long, language)

GET         /lessons/:lessonId/partners                                             @org.iatoki.judgels.sandalphon.controllers.LessonPartnerController.viewPartners(lessonId: Long)
GET         /lessons/:lessonId/partners/                                            @org.iatoki.judgels.sandalphon.controllers.LessonPartnerController.listPartners(lessonId: Long, pageIndex: Long ?= 0, orderBy ?= "id", orderDir ?= "desc")
GET         /lessons/:lessonId/partners/add                                         @org.iatoki.judgels.sandalphon.controllers.LessonPartnerController.addPartner(lessonId: Long)
POST        /lessons/:lessonId/partners                                             @org.iatoki.judgels.sandalphon.controllers.LessonPartnerController.postAddPartner(lessonId: Long)
GET         /lessons/:lessonId/partners/:partnerId/edit                             @org.iatoki.judgels.sandalphon.controllers.LessonPartnerController.editPartner(lessonId: Long, partnerId: Long)
POST        /lessons/:lessonId/partners/:partnerId                                  @org.iatoki.judgels.sandalphon.controllers.LessonPartnerController.postEditPartner(lessonId: Long, partnerId: Long)

GET         /lessons/:lessonId/versions/history                                     @org.iatoki.judgels.sandalphon.controllers.LessonVersionController.listVersionHistory(lessonId: Long)
GET         /lessons/:lessonId/versions/history/:hash/restore                       @org.iatoki.judgels.sandalphon.controllers.LessonVersionController.restoreVersionHistory(lessonId: Long, hash)
GET         /lessons/:lessonId/versions/local                                       @org.iatoki.judgels.sandalphon.controllers.LessonVersionController.viewVersionLocalChanges(lessonId: Long)
POST        /lessons/:lessonId/versions/local                                       @org.iatoki.judgels.sandalphon.controllers.LessonVersionController.postCommitVersionLocalChanges(lessonId: Long)
GET         /lessons/:lessonId/versions/local/rebase                                @org.iatoki.judgels.sandalphon.controllers.LessonVersionController.editVersionLocalChanges(lessonId: Long)
GET         /lessons/:lessonId/versions/local/discard                               @org.iatoki.judgels.sandalphon.controllers.LessonVersionController.discardVersionLocalChanges(lessonId: Long)

GET         /lessons/:lessonId/clients                                              @org.iatoki.judgels.sandalphon.controllers.LessonClientController.editClientLessons(lessonId: Long)
POST        /lessons/:lessonId/clients                                              @org.iatoki.judgels.sandalphon.controllers.LessonClientController.postEditClientLessons(lessonId: Long)
GET         /lessons/:lessonId/clients/:clientId                                    @org.iatoki.judgels.sandalphon.controllers.LessonClientController.viewClientLesson(lessonId: Long, clientId: Long)


GET         /clients                                                                @org.iatoki.judgels.sandalphon.controllers.ClientController.index()
GET         /clients/                                                               @org.iatoki.judgels.sandalphon.controllers.ClientController.listClients(page: Long ?= 0, orderBy ?= "id", orderDir ?= "asc", filterString ?= "")
GET         /clients/new                                                            @org.iatoki.judgels.sandalphon.controllers.ClientController.createClient()
POST        /clients                                                                @org.iatoki.judgels.sandalphon.controllers.ClientController.postCreateClient()
GET         /clients/:clientId                                                      @org.iatoki.judgels.sandalphon.controllers.ClientController.viewClient(clientId: Long)
GET         /clients/:clientId/edit                                                 @org.iatoki.judgels.sandalphon.controllers.ClientController.editClient(clientId: Long)
POST        /clients/:clientId                                                      @org.iatoki.judgels.sandalphon.controllers.ClientController.postEditClient(clientId: Long)

GET         /graders                                                                @org.iatoki.judgels.sandalphon.controllers.GraderController.index()
GET         /graders/                                                               @org.iatoki.judgels.sandalphon.controllers.GraderController.listGraders(page: Long ?= 0, orderBy ?= "id", orderDir ?= "asc", filterString ?= "")
GET         /graders/new                                                            @org.iatoki.judgels.sandalphon.controllers.GraderController.createGrader()
POST        /graders                                                                @org.iatoki.judgels.sandalphon.controllers.GraderController.postCreateGrader()
GET         /graders/:graderId                                                      @org.iatoki.judgels.sandalphon.controllers.GraderController.viewGrader(graderId: Long)
GET         /graders/:graderId/edit                                                 @org.iatoki.judgels.sandalphon.controllers.GraderController.editGrader(graderId: Long)
POST        /graders/:graderId                                                      @org.iatoki.judgels.sandalphon.controllers.GraderController.postEditGrader(graderId: Long)


GET         /users                                                                  @org.iatoki.judgels.sandalphon.controllers.UserController.index()
GET         /users/                                                                 @org.iatoki.judgels.sandalphon.controllers.UserController.listUsers(page: Long ?= 0, orderBy ?= "id", orderDir ?= "asc", filterString ?= "")
GET         /users/add                                                              @org.iatoki.judgels.sandalphon.controllers.UserController.addUser()
POST        /users                                                                  @org.iatoki.judgels.sandalphon.controllers.UserController.postAddUser()
GET         /users/:userId                                                          @org.iatoki.judgels.sandalphon.controllers.UserController.viewUser(userId: Long)
GET         /users/:userId/edit                                                     @org.iatoki.judgels.sandalphon.controllers.UserController.editUser(userId: Long)
POST        /users/:userId                                                          @org.iatoki.judgels.sandalphon.controllers.UserController.postEditUser(userId: Long)
GET         /users/:userId/remove                                                   @org.iatoki.judgels.sandalphon.controllers.UserController.deleteUser(userId: Long)

# Internal API
# Note: cannot use /api prefix

GET         /problems/:problemId/statements/render/:mediaFilename                   @org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemStatementAPIController.renderMediaById(problemId: Long, mediaFilename)
GET         /problems/:problemId/statements/media/:filename                         @org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemStatementAPIController.downloadStatementMediaFile(problemId: Long, filename)

GET         /problems/programming/:problemId/render/:mediaFilename                  @org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemStatementAPIController.renderMediaById(problemId: Long, mediaFilename)
GET         /problems/bundle/:problemId/render/:mediaFilename                       @org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemStatementAPIController.renderMediaById(problemId: Long, mediaFilename)
GET         /problems/bundle/:problemId/items/render/:mediaFilename                 @org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProblemStatementAPIController.renderMediaById(problemId: Long, mediaFilename)

GET         /lessons/:lessonId/statements/render/:mediaFilename                     @org.iatoki.judgels.sandalphon.controllers.api.internal.InternalLessonStatementAPIController.renderMediaById(lessonId: Long, mediaFilename)
GET         /lessons/:lessonId/render/:mediaFilename                                @org.iatoki.judgels.sandalphon.controllers.api.internal.InternalLessonStatementAPIController.renderMediaById(lessonId: Long, mediaFilename)
GET         /lessons/:lessonId/statements/media/:filename                           @org.iatoki.judgels.sandalphon.controllers.api.internal.InternalLessonStatementAPIController.downloadStatementMediaFile(lessonId: Long, filename)

GET         /problems/programming/:problemId/grading/testdata/:filename             @org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProgrammingProblemGradingAPIController.downloadGradingTestDataFile(problemId: Long, filename)
GET         /problems/programming/:problemId/grading/helpers/:filename              @org.iatoki.judgels.sandalphon.controllers.api.internal.InternalProgrammingProblemGradingAPIController.downloadGradingHelperFile(problemId: Long, filename)

# Client API

POST        /api/v1/problems/client                                                 @org.iatoki.judgels.sandalphon.controllers.api.client.v1.ClientProblemAPIControllerV1.findClientProblem()
GET         /api/v1/problems/:problemJid/statements/media/:filename                 @org.iatoki.judgels.sandalphon.controllers.api.client.v1.ClientProblemStatementAPIControllerV1.renderMediaByJid(problemJid, filename)

POST        /api/v1/problems/programming/:problemJid/statements                     @org.iatoki.judgels.sandalphon.controllers.api.client.v1.ClientProgrammingProblemStatementAPIControllerV1.renderStatement(problemJid)
GET         /api/v1/problems/programming/:problemJid                                @org.iatoki.judgels.sandalphon.controllers.api.client.v1.ClientProgrammingProblemAPIControllerV1.getProgrammingProblemInfo(problemJid)
GET         /api/v1/problems/programming/:problemJid/grading                        @org.iatoki.judgels.sandalphon.controllers.api.client.v1.ClientProgrammingProblemGradingAPIControllerV1.downloadGradingFiles(problemJid)

POST        /api/v1/problems/bundle/:problemJid/statements                          @org.iatoki.judgels.sandalphon.controllers.api.client.v1.ClientBundleProblemStatementAPIControllerV1.renderStatement(problemJid)
POST        /api/v1/problems/bundle/:problemJid/grade                               @org.iatoki.judgels.sandalphon.controllers.api.client.v1.ClientBundleProblemGradingAPIControllerV1.grade(problemJid)

POST        /api/v1/lessons/client                                                  @org.iatoki.judgels.sandalphon.controllers.api.client.v1.ClientLessonAPIControllerV1.findClientLesson()
GET         /api/v1/lessons/:lessonJid/statements/media/:filename                   @org.iatoki.judgels.sandalphon.controllers.api.client.v1.ClientLessonStatementAPIControllerV1.renderMediaByJid(lessonJid, filename)
POST        /api/v1/lessons/:lessonJid/statements                                   @org.iatoki.judgels.sandalphon.controllers.api.client.v1.ClientLessonStatementAPIControllerV1.renderStatement(lessonJid)
